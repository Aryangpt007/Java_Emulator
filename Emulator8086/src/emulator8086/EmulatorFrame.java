/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emulator8086;

import line.Commandn;
import line.Label_Definition;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import line.Line;
import line.Variable;
import steps.InstanceList;
import steps.Instance;

/**
 *
 * @author Aryan
 */
public class EmulatorFrame extends javax.swing.JFrame {

    /**
     * Creates new form EmulatorFrame
     */
    public EmulatorFrame() 
    {
        initComponents();
    }
    public HashMap<String, Integer> functionMap;
    public static HashMap<String, Memory> variableMap;
    public static MemoryView systemMemory;
    public static int Memory_Address = 0;
    public static int[] memoList = null;
    Object[] commandList = null;
    InstanceList InstList = null;
    int stepPointer;

    public EmulatorFrame(String[] listContent) 
    {
        initComponents();
        resetAll();
        try 
        {
            commandList = asmToLineList(listContent);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        }

        for (int i = 0; i < commandList.length; i++) 
        {
            System.out.println(i + ": " + ((Line) commandList[i]).toString());
        }
        executeCommand();

        //asm JList 
        jList2 = new javax.swing.JList(commandList);
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setEnabled(false);
        jList2.setAutoscrolls(true);
        jScrollPane3.setViewportView(jList2);

        jList1 = new javax.swing.JList(systemMemory.getList());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jList1.setEnabled(false);
        jList1.setAutoscrolls(true);
        jScrollPane2.setViewportView(jList1);

        load();

    }

    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        registerAH = new javax.swing.JTextField();
        registerAL = new javax.swing.JTextField();
        registerBL = new javax.swing.JTextField();
        registerBH = new javax.swing.JTextField();
        registerCL = new javax.swing.JTextField();
        registerCH = new javax.swing.JTextField();
        registerDL = new javax.swing.JTextField();
        registerDH = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        flagCF = new javax.swing.JTextField();
        flagZF = new javax.swing.JTextField();
        flagSF = new javax.swing.JTextField();
        flagOF = new javax.swing.JTextField();
        flagPF = new javax.swing.JTextField();
        flagDF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Reload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 100, -1));

        jButton3.setText("Step Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepBack(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 13, 103, -1));

        jButton4.setText("Single Step");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleStep(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 13, 100, -1));

        jButton5.setText("Run");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 13, 100, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        registerAH.setEditable(false);
        registerAH.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerAH.setText("00h");
        registerAH.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerAH, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 60, -1));

        registerAL.setEditable(false);
        registerAL.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerAL.setText("00h");
        registerAL.setPreferredSize(new java.awt.Dimension(24, 20));
        registerAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerALActionPerformed(evt);
            }
        });
        jPanel1.add(registerAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 60, -1));

        registerBL.setEditable(false);
        registerBL.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerBL.setText("00h");
        registerBL.setPreferredSize(new java.awt.Dimension(24, 20));
        registerBL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBLActionPerformed(evt);
            }
        });
        jPanel1.add(registerBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 60, -1));

        registerBH.setEditable(false);
        registerBH.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerBH.setText("00h");
        registerBH.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerBH, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 60, -1));

        registerCL.setEditable(false);
        registerCL.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerCL.setText("00h");
        registerCL.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerCL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 60, -1));

        registerCH.setEditable(false);
        registerCH.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerCH.setText("00h");
        registerCH.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerCH, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 60, -1));

        registerDL.setEditable(false);
        registerDL.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerDL.setText("00h");
        registerDL.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 60, -1));

        registerDH.setEditable(false);
        registerDH.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        registerDH.setText("00h");
        registerDH.setToolTipText("");
        registerDH.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(registerDH, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 60, -1));

        jLabel2.setText("H");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 15, -1));

        jLabel3.setText("L");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 20, -1));

        flagCF.setEditable(false);
        flagCF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagCF.setText("00h");
        flagCF.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(flagCF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 35, -1));

        flagZF.setEditable(false);
        flagZF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagZF.setText("00h");
        flagZF.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(flagZF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 35, -1));

        flagSF.setEditable(false);
        flagSF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagSF.setText("00h");
        flagSF.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(flagSF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 35, -1));

        flagOF.setEditable(false);
        flagOF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagOF.setText("00h");
        flagOF.setPreferredSize(new java.awt.Dimension(24, 20));
        jPanel1.add(flagOF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 35, -1));

        flagPF.setEditable(false);
        flagPF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagPF.setText("00h");
        flagPF.setPreferredSize(new java.awt.Dimension(24, 20));
        flagPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagPFActionPerformed(evt);
            }
        });
        jPanel1.add(flagPF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 35, -1));

        flagDF.setEditable(false);
        flagDF.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        flagDF.setText("00h");
        flagDF.setPreferredSize(new java.awt.Dimension(24, 20));
        flagDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flagDFActionPerformed(evt);
            }
        });
        jPanel1.add(flagDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 35, -1));

        jLabel7.setText("CF");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jLabel8.setText("ZF");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        jLabel9.setText("SF");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel10.setText("OF");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jLabel11.setText("PF");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        jLabel12.setText("DF");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 51, 120, 310));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Memory"));
        jPanel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jList1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jList1.setEnabled(false);
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Assembly"));

        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setEnabled(false);
        jScrollPane3.setViewportView(jList2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, -1, 286));

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 13, 108, -1));

        jLabel1.setText("AX");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel4.setText("BX");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        jLabel5.setText("CX");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel6.setText("DX");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:,
        stepPointer = 0;
        load();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void flagPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flagPFActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        stepPointer = 0;
        load();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void registerALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerALActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_registerALActionPerformed

    private void singleStep(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleStep
        // TODO add your handling code here:
        if (stepPointer < InstList.getSize()) 
        {
            stepPointer++;
            load();
        }
    }//GEN-LAST:event_singleStep

    private void stepBack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepBack
        // TODO add your handling code here:
        if (stepPointer > 0) 
        {
            stepPointer--;
            load();
        }
    }//GEN-LAST:event_stepBack

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        stepPointer = InstList.getSize() - 1;
        load();
        stepPointer = InstList.getSize();
        load();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void registerBLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_registerBLActionPerformed

    private void flagDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flagDFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flagDFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            @Override
            public void run() 
            {
                new EmulatorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField flagCF;
    private javax.swing.JTextField flagDF;
    private javax.swing.JTextField flagOF;
    private javax.swing.JTextField flagPF;
    private javax.swing.JTextField flagSF;
    private javax.swing.JTextField flagZF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField registerAH;
    private javax.swing.JTextField registerAL;
    private javax.swing.JTextField registerBH;
    private javax.swing.JTextField registerBL;
    private javax.swing.JTextField registerCH;
    private javax.swing.JTextField registerCL;
    private javax.swing.JTextField registerDH;
    private javax.swing.JTextField registerDL;
    // End of variables declaration//GEN-END:variables

    private Object[] asmToLineList(String[] listContent) throws Exception 
    {
        Object[] resultList = new Object[listContent.length];
        
        String[] checkList = {"!","@","#","$","%","^","&","*","(",")","-","+","=","{","}","|","<",">",".","?"};
        
        for (int i = 0; i < listContent.length; i++) 
        {
            StringTokenizer st;
            if (listContent[i].contains(";")) 
            {
                listContent[i] = listContent[i].substring(0, listContent[i].indexOf(";"));
            }
            boolean found = true;
            for (String item : checkList) 
            {
                if (listContent[i].contains(item)) 
                {
                    found = false;
                    
                    break;
                }
            }
            
            if(found == false)
            {
                throw new Exception("; , : , _ , [ , ] , ' , \"  are valid symbols\nEroor in Line :"+(i+1));
            }
            st = new StringTokenizer(listContent[i], " ,");

            List<String> tokens = new ArrayList<>();
            
            while (st.hasMoreTokens()) 
            {
                tokens.add(st.nextToken());
            }
            if (tokens.size() > 1 && (tokens.get(1).toLowerCase().equals("db"))) 
            {
                List<Integer> variables = new ArrayList<>();
               
                for (int j = 2; j < tokens.size(); j++) 
                {
                    String currToken = tokens.get(j);
                    
                    if (currToken.contains("'") || currToken.contains("\"")) 
                    {
                        currToken = currToken.replaceAll("\"", "");
                        currToken = currToken.replaceAll("'", "");
                        
                        for (int k = 0; k < currToken.length(); k++) 
                        {
                            variables.add((int) currToken.charAt(k));
                        }
                    } 
                    else 
                    {
                        variables.add(isAValue(currToken));
                    }
                }
                
                variableMap.put(tokens.get(0), new Memory(Memory.VariableType.DB, variables));

                Line var = new Variable(listContent[i], 1, tokens.get(0), i);
                resultList[i] = var;
            } 
            else if (tokens.size() > 1 && (tokens.get(1).toLowerCase().equals("dw"))) 
            {
                List<Integer> variables = new ArrayList<>();
                
                for (int j = 2; j < tokens.size(); j++) 
                {
                    variables.add(isAValue(tokens.get(j)));
                }
                
                variableMap.put(tokens.get(0), new Memory(Memory.VariableType.DW, variables));
                
                Line var = new Variable(listContent[i], 2, tokens.get(0), i);
                
                resultList[i] = var;

            } 
            else if (listContent[i].contains(":")) 
            {
                Line NewLabelDefinition = new Label_Definition(tokens.get(0), listContent[i].substring(0, tokens.get(0).indexOf(":")), i);
                functionMap.put(tokens.get(0).substring(0, tokens.get(0).indexOf(":")), i);
                
                resultList[i] = NewLabelDefinition;
            }
        }
        
        for (int i = 0; i < listContent.length; i++) 
        {
            StringTokenizer st;
            
            if (listContent[i].contains(";")) 
            {
                listContent[i] = listContent[i].substring(0, listContent[i].indexOf(";"));
            }

            st = new StringTokenizer(listContent[i], " ,");

            List<String> tokens = new ArrayList<>();
            
            while (st.hasMoreTokens()) 
            {
                tokens.add(st.nextToken());
            }
            
            if (tokens.size() > 1 && (tokens.get(1).toLowerCase().equals("db"))) 
            {
            }
            else if (tokens.size() > 1 && (tokens.get(1).toLowerCase().equals("dw"))) 
            {
            }
            else if (listContent[i].contains(":")) 
            {
            }
            else 
            {
                tokens.set(0, tokens.get(0).toUpperCase());
                
                if (!isACommand(tokens.get(0))) 
                {
                    throw new Exception("Cannot be Parsed\nError in Line: "+ (i+1));
                }
                
                Line NewCommand = new Commandn(listContent[i], tokens.get(0), i);
                
                for (int j = 1; j < tokens.size(); j++) 
                {
                    String Variable_s = tokens.get(j);
                    int value = isAValue(Variable_s);
                   
                    if (isARegister(Variable_s.toUpperCase())) //Register
                    {
                        ((Commandn) NewCommand).addVariable(new Variablev(Variable_s.toUpperCase()));
                    } 
                    else if (value != -1) //Immediate
                    {
                        ((Commandn) NewCommand).addVariable(new Variablev(value));
                    } 
                    else if (tokens.get(0).equals("LOOP") || tokens.get(0).equals("JMP")
                            || tokens.get(0).equals("JAE") || tokens.get(0).equals("JA")
                            || tokens.get(0).equals("JBE") || tokens.get(0).equals("JB")
                            || tokens.get(0).equals("JAE") || tokens.get(0).equals("JA")
                            || tokens.get(0).equals("JE") || tokens.get(0).equals("JG")
                            || tokens.get(0).equals("JGE") || tokens.get(0).equals("JL")
                            || tokens.get(0).equals("JLE") || tokens.get(0).equals("JNE")
                            || tokens.get(0).equals("JNP") || tokens.get(0).equals("JP")
                            || tokens.get(0).equals("JPO")) 
                    {
                        Integer line = functionMap.get(tokens.get(1));
                        
                        if (line == null) 
                        {
                            throw new Exception("Label not defined: " + tokens.get(1)+"\nError in Line: "+(i+1));
                        }
                        ((Commandn) NewCommand).functionLine = line.intValue();
                    }
                    else //Memory
                    {
                        if (Variable_s.contains("[") && Variable_s.contains("]")) 
                        {
                            ((Commandn) NewCommand).addVariable(new Variablev(Variable_s.substring(0, Variable_s.indexOf("[")), variableMap.get(Variable_s.substring(0, Variable_s.indexOf("["))).getType() == Memory.VariableType.DB ? 1 : 2, Integer.parseInt(Variable_s.substring(Variable_s.indexOf("[") + 1, Variable_s.indexOf("]")))));
                        } 
                        else 
                        {
                            ((Commandn) NewCommand).addVariable(new Variablev(Variable_s, variableMap.get(Variable_s).getType() == Memory.VariableType.DB ? 1 : 2, 0));
                        }
                    }
                }
                resultList[i] = NewCommand;
            }
        }
        return resultList;
    }

    private boolean isACommand(String commandIs) 
    {
        if (commandIs.equals("ADC")
                || commandIs.equals("ADD")
                || commandIs.equals("AND")
                || commandIs.equals("CLC")
                || commandIs.equals("CLD")
                || commandIs.equals("CMP")
                || commandIs.equals("DEC")
                || commandIs.equals("DIV")
                || commandIs.equals("HLT")
                || commandIs.equals("IDIV")
                || commandIs.equals("IMUL")
                || commandIs.equals("INC")
                || commandIs.equals("JA")
                || commandIs.equals("JAE")
                || commandIs.equals("JB")
                || commandIs.equals("JBE")
                || commandIs.equals("JE")
                || commandIs.equals("JG")
                || commandIs.equals("JGE")
                || commandIs.equals("JL")
                || commandIs.equals("JLE")
                || commandIs.equals("JMP")
                || commandIs.equals("JNE")
                || commandIs.equals("JNP")
                || commandIs.equals("JP")
                || commandIs.equals("JPO")
                || commandIs.equals("LEA")
                || commandIs.equals("LOOP")
                || commandIs.equals("MOV")
                || commandIs.equals("MUL")
                || commandIs.equals("NEG")
                || commandIs.equals("NOP")
                || commandIs.equals("NOT")
                || commandIs.equals("OR")
                || commandIs.equals("POP")
                || commandIs.equals("PUSH")
                || commandIs.equals("ROL")
                || commandIs.equals("ROR")
                || commandIs.equals("SBB")
                || commandIs.equals("SHL")
                || commandIs.equals("SHR")
                || commandIs.equals("STC")
                || commandIs.equals("STD")
                || commandIs.equals("SUB")
                || commandIs.equals("XOR")) 
        {
            return true;
        }
        return false;
    }

    private int isAValue(String Variable_s) 
    {
        try 
        {
            if (Variable_s.length() > 0) 
            {
                if (Variable_s.toUpperCase().endsWith("H")) 
                {
                    return Integer.parseInt(Variable_s.substring(0, Variable_s.length() - 1), 16);
                }
                if (Variable_s.toUpperCase().endsWith("B")) 
                {
                    return Integer.parseInt(Variable_s.substring(0, Variable_s.length() - 1), 2);
                } 
                else if (Variable_s.contains("\"") || Variable_s.contains("'")) 
                {
                    Variable_s = Variable_s.replaceAll("\"", "").replaceAll("'", "");
                    int result = 0;
                   
                    for (int i = 0; i < Variable_s.length(); i++) 
                    {
                        int var = (int) Variable_s.charAt(Variable_s.length() - 1 - i);
                        
                        for (int j = 0; j < i; j++) 
                        {
                            var = var * 256;
                        }
                        result += var;
                    }
                    return result;
                } 
                else 
                {
                    return Integer.parseInt(Variable_s);
                }
            }
        } 
        catch (Exception e) 
        {
        }
        return -1;
    }

    private boolean isARegister(String Variable_s) 
    {
        return Register.getRegister().getValue(Variable_s) != null;
    }

    private void executeCommand()// directing and executing incoming commands to the relevant instruction 
    {
        int line1 = 0;
        int LineBuffer = 0;
        try 
        {
            while (true) 
            {
                Line line = (Line) commandList[line1];
                Instance current_Instance = new Instance();
               
                if (line instanceof Variable) 
                {
                    line1++;
                } 
                else if (line instanceof Label_Definition) 
                {
                    line1++;
                } 
                else 
                {
                    line1 = commandExec(line1, (Commandn) line);
                }
                
                current_Instance.setLine(LineBuffer);
                current_Instance.setMemoryAddressList(memoList);
                InstList.save(current_Instance);
                
                if (line1 == -1) //In instructions like HLT, -1 is returned and terminated
                {
                    break;
                }
                LineBuffer = line1;

                    if (line1 == commandList.length) 
                {
                    break;
                }
            }
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        }
    }

    private int commandExec (int line1, Commandn commande) throws Exception 
    {
        switch (commande.commands.toUpperCase()) 
        {
            case "ADC":
                return Instructions.ADC(line1, commande);
            case "ADD":
                return Instructions.ADD(line1, commande);
            case "AND":
                return Instructions.AND(line1, commande);
            case "CLC":
                return Instructions.CLC(line1, commande);
            case "CLD":
                return Instructions.CLD(line1, commande);
            case "CMP":
                return Instructions.CMP(line1, commande);
            case "DEC":
                return Instructions.DEC(line1, commande);
            case "DIV":
                return Instructions.DIV(line1, commande);
            case "HLT":
                return Instructions.HLT(line1, commande);
            case "IDIV":
                return Instructions.IDIV(line1, commande);
            case "IMUL":
                return Instructions.IMUL(line1, commande);
            case "INC":
                return Instructions.INC(line1, commande);
            case "JA":
                return Instructions.JA(line1, commande);
            case "JAE":
                return Instructions.JAE(line1, commande);
            case "JB":
                return Instructions.JB(line1, commande);
            case "JBE":
                return Instructions.JBE(line1, commande);
            case "JE":
                return Instructions.JE(line1, commande);
            case "JG":
                return Instructions.JG(line1, commande);
            case "JGE":
                return Instructions.JGE(line1, commande);
            case "JL":
                return Instructions.JL(line1, commande);
            case "JLE":
                return Instructions.JLE(line1, commande);
            case "JMP":
                return Instructions.JMP(line1, commande);
            case "JNE":
                return Instructions.JNE(line1, commande);
            case "JNP":
                return Instructions.JNP(line1, commande);
            case "JP":
                return Instructions.JP(line1, commande);
            case "JPO":
                return Instructions.JPO(line1, commande);
            case "LEA":
                return Instructions.LEA(line1, commande);
            case "LOOP":
                return Instructions.LOOP(line1, commande);
            case "MOV":
                return Instructions.MOV(line1, commande);
            case "MUL":
                return Instructions.MUL(line1, commande);
            case "NEG":
                return Instructions.NEG(line1, commande);
            case "NOP":
                return Instructions.NOP(line1, commande);
            case "NOT":
                return Instructions.NOT(line1, commande);
            case "OR":
                return Instructions.OR(line1, commande);
            case "POP":
                return Instructions.POP(line1, commande);
            case "PUSH":
                return Instructions.PUSH(line1, commande);
            case "ROL":
                return Instructions.ROL(line1, commande);
            case "ROR":
                return Instructions.ROR(line1, commande);
            case "SBB":
                return Instructions.SBB(line1, commande);
            case "SHL":
                return Instructions.SHL(line1, commande);
            case "SHR":
                return Instructions.SHR(line1, commande);
            case "STC":
                return Instructions.STC(line1, commande);
            case "STD":
                return Instructions.STD(line1, commande);
            case "SUB":
                return Instructions.SUB(line1, commande);
            case "XOR":
                return Instructions.XOR(line1, commande);
        }
        return -1;
    }

    public void load() 
    {
        if (InstList.getSize() <= stepPointer) 
        {
            JOptionPane.showMessageDialog(this, "Done Emulating!", "Complete", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try 
        {
            InstList.load(stepPointer);
        } 
        catch (Exception ex) 
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        }
        
        Instance current_instance = InstList.get(stepPointer);
        jList2.setSelectedIndex(current_instance.ln);
        jList2.ensureIndexIsVisible(current_instance.ln);
        
        if (current_instance.memoryAddressList != null) 
        {
            jList1.setSelectedIndices(current_instance.memoryAddressList);
            jList1.ensureIndexIsVisible(current_instance.memoryAddressList[0]);
        } 
        else 
        {
            jList1.clearSelection();
        }
        
        registerAH.setText(Register.getRegister().getHexValue("AH"));
        registerAL.setText(Register.getRegister().getHexValue("AL"));
        registerBH.setText(Register.getRegister().getHexValue("BH"));
        registerBL.setText(Register.getRegister().getHexValue("BL"));
        registerCH.setText(Register.getRegister().getHexValue("CH"));
        registerCL.setText(Register.getRegister().getHexValue("CL"));
        registerDH.setText(Register.getRegister().getHexValue("DH"));
        registerDL.setText(Register.getRegister().getHexValue("DL"));
        flagCF.setText(Flag.getFlag().CF ? "1" : "0");
        flagDF.setText(Flag.getFlag().DF ? "1" : "0");
        flagOF.setText(Flag.getFlag().OF ? "1" : "0");
        flagPF.setText(Flag.getFlag().PF ? "1" : "0");
        flagSF.setText(Flag.getFlag().SF ? "1" : "0");
        flagZF.setText(Flag.getFlag().ZF ? "1" : "0");
    }

    private void resetAll() 
    {
        stepPointer = 0;
        InstList = new InstanceList();

        systemMemory = new MemoryView(1024);
        functionMap = new HashMap<>();
        variableMap = new HashMap<>();
        Memory_Address = 0;
        memoList = null;
        try 
        {
            Register.getRegister().setValue("AX", 0);
            Register.getRegister().setValue("BX", 0);
            Register.getRegister().setValue("CX", 0);
            Register.getRegister().setValue("DX", 0);
            Flag.getFlag().CF = false;
            Flag.getFlag().DF = false;
            Flag.getFlag().OF = false;
            Flag.getFlag().SF = false;
            Flag.getFlag().PF = false;
            Flag.getFlag().ZF = false;

        } 
        catch (Exception ex) 
        {
            Logger.getLogger(EmulatorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
